#!/usr/bin/env python

import os
import sys
from optparse import OptionParser

cwd = os.path.abspath("%s/.." % os.path.dirname(os.path.abspath(__file__)))
sys.path.append("%s" % cwd)
from procszoo.utils import *

def get_options():
    propagation_types = ["slave", "shared", "private", "unchange"]
    progname = os.path.basename(sys.argv[0]) or 'richard_parker'
    project_url = "http://github.com/xning/procszoo"
    description="""A simple cli to create new namespaces env,
default it will enable each available namespaces"""
    epilog="%s is part of procszoo: %s"  % (progname, project_url)
    parser = OptionParser(
        usage="Usage: %prog [options] cmd_run_in_namespaces",
        description=description,
        epilog=epilog)
    parser.add_option("-n", "--namespace", action="append", dest="namespaces",
                        help="namespace that should be create")
    parser.add_option("-N", "--negative-namespace", action="append",
                          dest="negative_namespaces",
                          help="namespace that should not be create")
    parser.add_option("-r", "--maproot", action="store_true", dest="maproot",
                          default=True,
                          help="""map current effective user/group to root/root,
implies -n user""")
    parser.add_option("--no-maproot", action="store_false",
                        dest="maproot")
    parser.add_option("-u", "--user-map", action="append", dest="users_map",
                          type="string",
                          help="user map settings")
    parser.add_option("-g", "--group-map", action="append", dest="groups_map",
                          type="string",
                          help="group map settings")
    parser.add_option(
        "-s", "--setgroups", action="store", type="string",
        dest="setgroups",
        help="""control the setgroups syscall in user namespaces,
        when setting to 'allow' will enable --no-maproot option""")
    parser.add_option("--mountproc", action="store_true", dest="mountproc",
                        help="remount procfs mountpoin, implies --n mount",
                      default=True)
    parser.add_option("--no-mountproc", action="store_false", dest="mountproc",
                        help="do not remount procfs")
    parser.add_option("--mountpoint", action="store", type="string",
                        dest="mountpoint",
                        help="dir that the new procfs would be mounted to")
    parser.add_option("-b", "--ns_bind_dir", action="store", type="string",
                        dest="ns_bind_dir",
                        help="dir that the new namespaces would be mounted to")
    parser.add_option(
        "--propagation", action="store", type="string", dest="propagation",
        help="modify mount propagation in mount namespace: %s" %
        "|".join(propagation_types))
    parser.add_option("-l", "--list", action="store_true",
                          dest="show_ns_status", default=False,
                          help="list namespaces status")
    parser.add_option("-v", "--version", action="store_true", default=False,
                          dest="show_version")

    (options, args) = parser.parse_args()

    if options.setgroups == "allow" and options.maproot:
        options.maproot = False
    if options.mountproc and options.mountpoint is None:
        options.mountpoint = '/proc'

    return options, args

def check_if_need_root_privilege(options):
    adjust_namespaces()
    require_root_privilege = False
    if not user_namespace_available():
        require_root_privilege = True
    if options.namespaces and "user" not in options.namespaces:
        require_root_privilege = True
    if options.negative_namespaces and "user" in options.negative_namespaces:
        require_root_privilege = True
    if options.ns_bind_dir:
        require_root_privilege = True
    if require_root_privilege:
        euid = os.geteuid()
        if euid != 0:
            sys.stderr.write(
                "You do not have permission, pls try again as root user\n")
            sys.exit(1)

def show_namespaces_then_quit(workbench):
    if options.show_ns_status:
        for v in show_namespaces_status():
            print "%-6s: %-5s" % v
        sys.exit(0)

if __name__ == "__main__":
    options, args = get_options()
    nscmd = None
    if args: nscmd=args

    if options.show_version:
        sys.stderr.write("version: %s\n" % __version__)
        sys.exit(1)

    check_if_need_root_privilege(options)
    show_namespaces_then_quit(workbench)

    spawn_namespaces(
        namespaces=options.namespaces,
        negative_namespaces=options.negative_namespaces,
        maproot=options.maproot,
        mountproc=options.mountproc,
        mountpoint=options.mountpoint,
        ns_bind_dir=options.ns_bind_dir,
        propagation=options.propagation,
        nscmd=nscmd, users_map=options.users_map,
        groups_map=options.groups_map,
        setgroups=options.setgroups)
